#version 330 core

layout(points) in;
layout(line_strip, max_vertices = 2) out;

in VO {
	vec4 color;
	vec4 secondary_color;
	vec3 position_window;
	float size;
} vi[];

out vec4 color_fs;

uniform int stick_coordinate_index = 1;
uniform float stick_base_window = 0.0;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of plot_lib.glsl ***********************************
uniform float attribute_min[8];
uniform float attribute_max[8];
float tick_space_from_attribute_space(int ai, float value);
float attribute_space_from_tick_space(int ai, float value);
float window_space_from_tick_space(int ai, float value);
float tick_space_from_window_space(int ai, float value);
vec3 plot_space_from_window_space(vec3 pnt);
vec3 window_space_from_plot_space(vec3 pnt);
vec3 world_space_from_plot_space(vec3 pnt);
vec3 map_color(in float attributes[8], in vec3 base_color, int idx = 0);
float map_opacity(in float attributes[8], in float base_opacity, int idx = 0);
float map_size(in float attributes[8], in float base_size);
//***** end interface of plot_lib.glsl ***********************************


void main()
{
	color_fs = vi[0].color;
	gl_Position = gl_in[0].gl_Position;
	EmitVertex();
	color_fs = vi[0].secondary_color;
	vec3 base_position_window = vi[0].position_window;
	base_position_window[stick_coordinate_index] = stick_base_window;
	vec3 base_position_world = world_space_from_plot_space(plot_space_from_window_space(base_position_window));
	gl_Position = get_modelview_projection_matrix()*vec4(base_position_world, 1.0);
	EmitVertex();
	EndPrimitive();
}