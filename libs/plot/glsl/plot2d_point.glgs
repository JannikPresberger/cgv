#version 330 core

uniform float reference_point_size = 1.0;
uniform float pixel_extent_per_depth;
uniform bool screen_aligned = false;

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

in VO {
	vec4 color;
	vec4 secondary_color;
	vec3 position_window;
	float size;
} vi[];

out vec2 uv;
out vec4 color_fs;
out vec4 secondary_color_fs;
out float percentual_blend_width;
out float percentual_core_size;
out float percentual_point_size;
out float percentual_splat_size;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of plot_lib.glsl ***********************************
uniform float attribute_min[8];
uniform float attribute_max[8];
float tick_space_from_attribute_space(int ai, float value);
float attribute_space_from_tick_space(int ai, float value);
float window_space_from_tick_space(int ai, float value);
float tick_space_from_window_space(int ai, float value);
vec3 plot_space_from_window_space(vec3 pnt);
vec3 window_space_from_plot_space(vec3 pnt);
vec3 world_space_from_plot_space(vec3 pnt);
vec3 map_color(in float v_window, int idx);
vec3 map_color(in float attributes[8], in vec3 base_color, int idx);
float map_opacity(in float v_window, int idx);
float map_opacity(in float attributes[8], in float base_opacity, int idx);
float map_size(in float v_window, int idx);
float map_size(in float attributes[8], in float base_size, int idx);
vec3 map_color(in float v_window);
vec3 map_color(in float attributes[8], in vec3 base_color);
float map_opacity(in float v_window);
float map_opacity(in float attributes[8], in float base_opacity);
float map_size(in float v_window);
float map_size(in float attributes[8], in float base_size);
//***** end interface of plot_lib.glsl ***********************************

//***** begin interface of splat.glsl ***********************************
void prepare_splat(
	in float reference_point_radius, in float pixel_extent,
	out float percentual_core_size, out float percentual_point_size,
	out float percentual_blend_width, out float percentual_splat_size);
//***** end interface of surface.glsl ***********************************

void emit_corner(in mat4 M, in vec3 corner, in float u, in float v)
{
	uv = vec2(u,v);
	gl_Position	= M * vec4(corner,1.0);
	EmitVertex();
}

void main()
{
	// set pass through attributes
	color_fs = vi[0].color;
	secondary_color_fs = vi[0].secondary_color;
	// transform position to eye space
	vec3 center = plot_space_from_window_space(vi[0].position_window);
	float z_eye;
	vec4 tmp = get_modelview_matrix()*vec4(center,1.0);
	mat4 M;
	if (screen_aligned) {
		center = tmp.xyz/tmp.w;
		z_eye = center.z;
		M = get_projection_matrix();
	}
	else {
		z_eye = tmp.z/tmp.w;
		M = get_modelview_projection_matrix();
	}
	// compute extent of a pixel at point depth in eye coordinates
	float pixel_extent = pixel_extent_per_depth * abs(z_eye);
	// compute point radius from input point size
	float reference_point_radius = 0.5 * vi[0].size * reference_point_size;
	// compute splat parameters for fragment shader
	prepare_splat(reference_point_radius, pixel_extent,
		percentual_core_size, percentual_point_size,
		percentual_blend_width, percentual_splat_size);
	// compute radius of splat
	float splat_radius = reference_point_radius * percentual_splat_size;
	// compute splat base vectors scaled by radius
	vec3 dx = vec3(splat_radius ,0.0, 0.0);
	vec3 dy = vec3(0.0, splat_radius, 0.0);
	// generate splat vertices
	emit_corner(M, center + dx - dy,  percentual_splat_size, -percentual_splat_size);
	emit_corner(M, center + dx + dy,  percentual_splat_size,  percentual_splat_size);
	emit_corner(M, center - dx - dy, -percentual_splat_size, -percentual_splat_size);
	emit_corner(M, center - dx + dy, -percentual_splat_size,  percentual_splat_size);
}
