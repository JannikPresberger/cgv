#version 430

//***** begin interface of fragment2d.glfs ***********************************
vec4 get_color();
void override_color(vec4 color);
void finish_fragment2d(in vec2 texcoords);
void finish_fragment2d();
//***** end interface of fragment2d.glfs ***********************************

uniform layout(location = 0) sampler1D hist_tex;

uniform ivec2 resolution;
uniform vec4 border_color = vec4(1.0);
uniform uint border_width_in_pixel = 0u;

uniform uint max_value = 1u;
uniform float nearest_linear_mix = 1.0;

uniform float A;

in vec2 tex_coord;

float texture_nearest(sampler1D tex, float coord) {
	int tex_size = textureSize(tex, 0);
	int u = int(coord * tex_size);

	return texelFetch(tex, u, 0).r;
}

// smooth filtering from https://www.shadertoy.com/view/XsfGDn
float texture_smooth(in sampler1D tex, in float coord) {
	float tex_size = textureSize(tex, 0);
	float u = coord * tex_size + 0.5;

	float iu = floor(u);
	float fu = fract(u);

	u = iu + fu*fu*(3.0-2.0*fu); // fuv*fuv*fuv*(fuv*(fuv*6.0-15.0)+10.0);
	u = (u - 0.5)/tex_size;

	return textureLod(tex, u, 0).r;
}

void main() {
	
	vec4 final_color = vec4(0.0);

	float height_nearest = texture_nearest(hist_tex, tex_coord.x) / float(max_value);
	float height_linear = texture(hist_tex, tex_coord.x).r / float(max_value);

	float height = mix(height_nearest, height_linear, nearest_linear_mix);

	float border = 0.0f;

	if(border_width_in_pixel > 0u)
		border = float(border_width_in_pixel) / resolution.y;

	if(tex_coord.y <= height + border) {
		final_color = border_color;
		
		if(tex_coord.y <= height)
			final_color = get_color();
	}

	override_color(final_color);
	finish_fragment2d();

	// Smoothstep
	/*int size = textureSize(tex, 0);
	float texel_size = 1.0 / float(size);

	float v0 = texture(tex, tex_coord.x).r / float(max_value);
	float v1 = texture(tex, tex_coord.x + texel_size).r / float(max_value);

	float u = tex_coord.x * size;
	float u_int = 0.0;
	float u_frac = modf(u, u_int);

	float t = smoothstep(0.0, 1.0, u_frac);
	float height = mix(v0, v1, t);

	frag_color = vec4(vec3(tex_coord.y > height ? 0.0 : 1.0), 1.0);*/

	// Pseudo-Antialiased
		/*
		float height = texture(tex, tex_coord.x).r / float(max_value);

	//if(tex_coord.y <= height) {
		frag_color = color;
		frag_color.a = 1.0;

		float pixel_size = 1.0 / float(resolution.y);

		float delta = fwidth(height);

		float alpha1 = 1.0 - smoothstep(height - delta, height, tex_coord.y);
		float alpha2 = 1.0 - smoothstep(height - pixel_size, height, tex_coord.y);

		frag_color.rgb *= min(alpha1, alpha2);

		/*if(border_width_in_pixel > 0u) {
			
			float border = float(border_width_in_pixel) * pixel_size;

			if(tex_coord.y >= height - border)
				frag_color = border_color;
		}*
	//} else {
	//	frag_color = vec4(0.0);
	//}

	if(apply_gamma)
		frag_color.rgb = clamp(pow(frag_color.rgb, vec3(2.2)), 0.0, 0.9999999);

	if(!use_blending)
		frag_color.a = 1.0;*/
}
