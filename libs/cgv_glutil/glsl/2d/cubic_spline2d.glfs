#version 430

//***** begin interface of fragment2d.glfs ***********************************
uniform vec4 border_color = vec4(1.0);
uniform float border_width = 0.0;
uniform float feather_width = 1.0;

uniform bool use_smooth_feather = false;

vec2 get_shape_size();
vec4 get_color();
void override_color(in vec4 color);
void finish_sdf_fragment2d(in float signed_distance, in vec2 texcoords);
void finish_sdf_fragment2d(in float signed_distance);
void finish_fragment2d(in vec2 texcoords);
void finish_fragment2d();
//***** end interface of fragment2d.glfs ***********************************

uniform float width = 1.0;

in flat int idx_fs;
in vec4 color_fs;
in flat vec2 size_fs;
in vec2 tex_coord_fs;
in vec2 pix_coord_fs;
in flat vec2 pos_a_fs;
in flat vec2 pos_b_fs;
in flat vec2 pos_c_fs;
in flat vec2 pos_d_fs;
in flat vec2 pos_e_fs;

float dot2(in vec2 v) {
	return dot(v,v);
}

float cross2(in vec2 a, in vec2 b) {
	return a.x*b.y - a.y*b.x;
}

float op_union(float d1, float d2)
{
	return min(d1, d2);
}

float op_subtraction(float d1, float d2)
{
	return max(-d1, d2);
}

// https://www.shadertoy.com/view/MlKcDD
float ud_bezier(in vec2 pos, in vec2 A, in vec2 B, in vec2 C)
{    
    vec2 a = B - A;
    vec2 b = A - 2.0*B + C;
    vec2 c = a * 2.0;
    vec2 d = A - pos;

    float kk = 1.0/dot(b,b);
    float kx = kk * dot(a,b);
    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;
    float kz = kk * dot(d,a);      

    float res = 0.0;

    float p = ky - kx*kx;
    float p3 = p*p*p;
    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;
    float h = q*q + 4.0*p3;

    if( h>=0.0 ) 
    {   // 1 root
        h = sqrt(h);
        vec2 x = (vec2(h,-h)-q)/2.0;
        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));
        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );
        res = dot2(d+(c+b*t)*t);
    }
    else 
    {   // 3 roots
        float z = sqrt(-p);
        float v = acos(q/(p*z*2.0))/3.0;
        float m = cos(v);
        float n = sin(v)*1.732050808;
        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );
        res = min( dot2(d+(c+b*t.x)*t.x),
                   dot2(d+(c+b*t.y)*t.y) );
        // the third root cannot be the closest. See https://www.shadertoy.com/view/4dsfRS
        // res = min(res,dot2(d+(c+b*t.z)*t.z));
    }
    
    return sqrt(res);
}

void main() {
	vec4 color = color_fs;

	float dist0 = ud_bezier(pix_coord_fs, pos_a_fs, pos_b_fs, pos_c_fs);
	float dist1 = ud_bezier(pix_coord_fs, pos_c_fs, pos_d_fs, pos_e_fs);
	
	dist0 -= 0.5*width;
	dist1 -= 0.5*width;

	float dist = op_union(dist0, dist1);

	if(dist > 0.5*feather_width)
		discard;

	float limit = -0.5*feather_width;
	float inv_feather = 1.0 / feather_width;
	
	float feather_alpha = use_smooth_feather ?
		1.0 - smoothstep(0.0, 1.0, (dist - limit) * inv_feather) :
		1.0 - clamp((dist - limit) * inv_feather, 0.0, 1.0);

	if(border_width > 0.0) {
		float border_limit = -border_width - 0.5*feather_width;
		float border_feather_alpha = clamp((dist - border_limit) * inv_feather, 0.0, 1.0);
		color = mix(color, border_color, border_feather_alpha);
	}
	
	color.a *= feather_alpha;
	
	override_color(color);
	finish_fragment2d();
}
