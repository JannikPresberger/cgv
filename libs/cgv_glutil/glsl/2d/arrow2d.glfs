#version 430

//***** begin interface of fragment2d.glfs ***********************************
uniform float border_radius = 0.0;
uniform float feather_width = 1.0;
uniform float feather_origin = 0.5;

vec2 get_shape_size();
vec4 get_color();
void override_color(in vec4 color);
void finish_sdf_fragment2d(in float signed_distance, in vec2 texcoords);
void finish_sdf_fragment2d(in float signed_distance);
void finish_fragment2d(in vec2 texcoords);
void finish_fragment2d();
//***** end interface of fragment2d.glfs ***********************************

uniform float stem_width;
uniform float head_width;

in vec2 pix_coord;
in vec2 tex_coord;
in flat vec2 pos_a;
in flat vec2 pos_b;
in flat float hl;

// https://www.shadertoy.com/view/slj3Dd
// The arrow goes from a to b. It's thickness is w.x. The arrow
// head's thickness is w.y.
float sd_arrow(in vec2 p, vec2 a, vec2 b, vec2 w)
{
	float cc = 0.5*head_width;
	float dd = border_radius / cc;

	float head_length = hl + dd*hl;
	float head_ratio = (2.0*head_length - feather_origin*feather_width) / (head_width + feather_origin*feather_width);

    // constant setup
    const float k = head_ratio;
	vec2  ba = b - a;
    float l2 = dot(ba,ba);
    float l = sqrt(l2);

    // pixel setup
    p = p-a;
    p = mat2(ba.x,-ba.y,ba.y,ba.x)*p/l;
    p.y = abs(p.y);
    vec2 pz = p-vec2(l-w.y*k,w.y);

    // === distance (four segments) === 

    vec2 q = p;
    q.x -= clamp( q.x, 0.0, l-w.y*k );
    q.y -= w.x;
    float di = dot(q,q);
    //----
    q = pz;
    q.y -= clamp( q.y, w.x-w.y, 0.0 );
    di = min( di, dot(q,q) );
    //----
    if( p.x<w.x ) // conditional is optional
    {
    q = p;
    q.y -= clamp( q.y, 0.0, w.x );
    di = min( di, dot(q,q) );
    }
    //----
    if( pz.x>0.0 ) // conditional is optional
    {
    q = pz;
    q -= vec2(k,-1.0)*clamp( (q.x*k-q.y)/(k*k+1.0), 0.0, w.y );
    di = min( di, dot(q,q) );
    }
    
    // === sign === 
    
    float si = 1.0;
    float z = l - p.x;
    if( min(p.x,z)>0.0 ) //if( p.x>0.0 && z>0.0 )
    {
      float h = (pz.x<0.0) ? w.x : z/k;
      if( p.y<h ) si = -1.0;
    }
    return si*sqrt(di);
}

void main() {
	
	vec2 thickness = 0.5*vec2(stem_width, head_width);
	float dist = sd_arrow(pix_coord, pos_a, pos_b, thickness - border_radius + feather_origin*feather_width);
	finish_sdf_fragment2d(dist, tex_coord);
}
