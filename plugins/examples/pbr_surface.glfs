#version 430

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_inverse_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of fragment.glfs ***********************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
//***** end interface of fragment.glfs ***********************************

uniform layout(binding = 0) samplerCube irradiance_map;
uniform layout(binding = 1) samplerCube prefiltered_specular_map;
uniform layout(binding = 2) sampler2D brdf_lut;
uniform layout(binding = 3) sampler2DShadow shadow_map;

uniform vec3 eye_pos;
uniform vec3 light_dir;

uniform vec3 F0;
uniform float roughness;

in vec4 position_eye;
in vec4 position_light_space;
in vec3 normal_eye;
in vec2 texcoord_fs;
in vec4 color_fs;

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

float compute_shadow_factor(vec4 p_light_space, vec3 normal) {
	// perform perspective divide
    vec3 projCoords = p_light_space.xyz;// / p_light_space.w;
	// prevent sampling outside the lights frustum
	if(projCoords.z > 1.0)
        return 1.0;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    //float closestDepth = texture(shadow_map, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
	// compute bias to prevent moire effects
	//vec3 light_dir = normalize(-vec3(4.0f, 4.0f, -2.0f));
	float bias = max(0.05 * (1.0 - dot(normal, -light_dir)), 0.005); 
    
	// check whether current frag pos is in shadow
    //float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadow_map, 0);
	//for(int x = -1; x <= 1; ++x) {
	//	for(int y = -1; y <= 1; ++y) {
	//		float pcfDepth = texture(shadow_map, projCoords.xy + vec2(x, y) * texelSize).r;
	//		shadow += ((currentDepth - bias) > pcfDepth) ? 1.0 : 0.0;
	//	}    
	//}
	shadow /= 9.0;

    return 1.0 - 0.5*shadow;
}

const vec2 poisson_disk[4] = vec2[](
  vec2( -0.94201624, -0.39906216 ),
  vec2( 0.94558609, -0.76890725 ),
  vec2( -0.094184101, -0.92938870 ),
  vec2( 0.34495938, 0.29387760 )
);

float random(vec4 seed4) {
	float dot_product = dot(seed4, vec4(12.9898, 78.233, 45.164, 94.673));
    return fract(sin(dot_product) * 43758.5453);
}

float compute_visibility_factor(vec4 p_light_space, vec3 normal) {
	vec3 proj_coords = p_light_space.xyz;

	float visibility = 1.0;
	float bias = max(0.05 * (1.0 - dot(normal, -light_dir)), 0.005);

	

	//if(texture(shadow_map, proj_coords.xy).r < proj_coords.z - bias){
	//	visibility = 0.0;
	//}

	/*for(int i = 0; i < 4; ++i){
		if(texture(shadow_map, proj_coords.xy + poisson_disk[i]/700.0).r  <  proj_coords.z - bias) {
			visibility-=0.2;
	}*/

	//vec3 shadow_coord = vec3(proj_coords.xy, proj_coords.z - bias);
	//float shadow_factor = texture(shadow_map, shadow_coord);
	//visibility = shadow_factor;

	float texel_size = 1.0 / textureSize(shadow_map, 0).x;

	for(int i = 0; i < 4; ++i){
		int index = i;
		//int index = int(4.0*random(vec4(gl_FragCoord.xyy, i))) & 0x00000003;
		vec3 shadow_coord = vec3(proj_coords.xy + poisson_disk[index] * texel_size, proj_coords.z - bias);
		float shadow_factor = 1.0 - texture(shadow_map, shadow_coord);
		visibility -= 0.25 * shadow_factor;
	}

	return visibility;
}

void main()
{
	vec3 p_world = (get_inverse_modelview_matrix() * position_eye).xyz;
	vec3 n_world = normalize(get_inverse_normal_matrix() * normal_eye);
	
	//vec4 p_light_space = light_space_matrix * vec4(p_world, 1.0);

	vec3 V = normalize(eye_pos - p_world);
	vec3 N = n_world;

	//vec3 V = normalize(-position_eye.xyz);
	//vec3 N = normal_eye;

	vec3 R = reflect(-V, N);

	const float MAX_REFLECTION_LOD = 4.0;
    vec3 prefilteredColor = textureLod(prefiltered_specular_map, R,  roughness * MAX_REFLECTION_LOD).rgb;

	//vec3 F0 = vec3(0.5);
	float ao = 1.0;

	//vec3 ambient = texture(irradiance_map, N).rgb;
	vec3 kS = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);
	vec3 kD = 1.0 - kS;

	vec2 envBRDF  = texture(brdf_lut, vec2(max(dot(N, V), 0.0), roughness)).rg;

	//vec3 irradiance = texture(irradiance_map, normalize(get_inverse_normal_matrix() * N)).rgb;
	vec3 irradiance = texture(irradiance_map, N).rgb;
	vec3 diffuse    = irradiance * color_fs.rgb;
	
	vec3 specular = prefilteredColor * (kS * envBRDF.x + envBRDF.y);
	vec3 ambient    = (kD * diffuse + specular) * ao;

	// normal light computation here:
	// ...

	float shadow = compute_shadow_factor(position_light_space, n_world);
	float visibility = compute_visibility_factor(position_light_space, n_world);

	//vec4 frag_color = vec4(ambient * clamp(shadow, 0.0, 1.0), 1.0);
	//vec4 frag_color = vec4(ambient * visibility, 1.0);
	vec4 frag_color = vec4(vec3(visibility), 1.0);
	//vec4 frag_color = vec4(ambient, 1.0);

	finish_fragment(frag_color);
	//finish_fragment(vec4(0.5*normal_eye + 0.5, 1.0));
}
